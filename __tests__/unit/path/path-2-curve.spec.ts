import { path2Curve } from '../../../src';
import { getCirclePath } from './util';

describe('test path to curve', () => {
  it('should keep Z', () => {
    const [pathArray, zCommandIndexes] = path2Curve('M 10,10 L -10,0 L 10,-10 Z M 10,10 L -10,0 L 10,-10 Z', true);
    expect(pathArray).toEqual([
      ['M', 10, 10],
      ['C', 12.23606797749979, 11.118033988749895, 1.3471359549995796, 5.67356797749979, -10, 0],
      ['C', -7.76393202250021, -1.118033988749895, 3.75, -6.875, 10, -10],
      ['C', 10, 0, 10, 3.75, 10, 10],
      ['M', 10, 10],
      ['C', 12.23606797749979, 11.118033988749895, 1.3471359549995796, 5.67356797749979, -10, 0],
      ['C', -7.76393202250021, -1.118033988749895, 3.75, -6.875, 10, -10],
      ['C', 10, 0, 10, 3.75, 10, 10],
    ]);
    expect(zCommandIndexes).toEqual([3, 7]);
  });

  it('should convert invalid arc', () => {
    const pathArray = path2Curve([
      ['M', 0, 0],
      ['A', 0, 0, 0, 1, 0, 0, 0],
      ['A', 0, 0, 0, 1, 0, 0, 0],
    ]);
    expect(pathArray).toEqual([
      ['M', 0, 0],
      ['C', 0, 0, 0, 0, 0, 0],
      ['C', 0, 0, 0, 0, 0, 0],
    ]);
  });

  it('should parse Line correctly', () => {
    expect(
      path2Curve([
        ['M', 0, 0],
        ['L', 100, 100],
      ]),
    ).toEqual([
      ['M', 0, 0],
      ['C', 44.194173824159215, 44.194173824159215, 68.75, 68.75, 100, 100],
    ]);
  });

  it('should parse Circle correctly', () => {
    expect(path2Curve(getCirclePath(0, 0, 100, 100))).toEqual([
      ['M', -100, 100],
      [
        'C',
        -99.99999999999999,
        176.98003589195008,
        -16.66666666666667,
        225.09255832441892,
        49.999999999999986,
        186.60254037844388,
      ],
      ['C', 80.9401076758503, 168.73926088303568, 100, 135.72655899081636, 100, 100],
      ['C', 100, 23.01996410804992, 16.66666666666668, -25.092558324418903, -49.99999999999998, 13.397459621556123],
      ['C', -80.94010767585029, 31.2607391169643, -100, 64.27344100918364, -100, 100],
      ['C', -100, 100, -100, 100, -100, 100],
    ]);

    const [pathArray, zCommandIndexes] = path2Curve(getCirclePath(0, 0, 100, 100), true);
    expect(pathArray).toEqual([
      ['M', -100, 100],
      [
        'C',
        -99.99999999999999,
        176.98003589195008,
        -16.66666666666667,
        225.09255832441892,
        49.999999999999986,
        186.60254037844388,
      ],
      ['C', 80.9401076758503, 168.73926088303568, 100, 135.72655899081636, 100, 100],
      ['C', 100, 23.01996410804992, 16.66666666666668, -25.092558324418903, -49.99999999999998, 13.397459621556123],
      ['C', -80.94010767585029, 31.2607391169643, -100, 64.27344100918364, -100, 100],
      ['C', -100, 100, -100, 100, -100, 100],
    ]);

    expect(zCommandIndexes).toEqual([5]);
  });

  it('should keep cubic curve unchanged', () => {
    let pathArray = path2Curve([
      ['M', -100, 100],
      [
        'C',
        -99.99999999999999,
        176.98003589195008,
        -16.66666666666667,
        225.09255832441892,
        49.999999999999986,
        186.60254037844388,
      ],
      ['C', 80.9401076758503, 168.73926088303568, 100, 135.72655899081636, 100, 100],
      ['C', 100, 23.01996410804992, 16.66666666666668, -25.092558324418903, -49.99999999999998, 13.397459621556123],
      ['C', -80.94010767585029, 31.2607391169643, -100, 64.27344100918364, -100, 100],
      ['C', -100, 100, -100, 100, -100, 100],
    ]);
    expect(pathArray).toEqual([
      ['M', -100, 100],
      [
        'C',
        -99.99999999999999,
        176.98003589195008,
        -16.66666666666667,
        225.09255832441892,
        49.999999999999986,
        186.60254037844388,
      ],
      ['C', 80.9401076758503, 168.73926088303568, 100, 135.72655899081636, 100, 100],
      ['C', 100, 23.01996410804992, 16.66666666666668, -25.092558324418903, -49.99999999999998, 13.397459621556123],
      ['C', -80.94010767585029, 31.2607391169643, -100, 64.27344100918364, -100, 100],
      ['C', -100, 100, -100, 100, -100, 100],
    ]);

    let zCommandIndexes;
    [pathArray, zCommandIndexes] = path2Curve(
      [
        ['M', -100, 100],
        [
          'C',
          -99.99999999999999,
          176.98003589195008,
          -16.66666666666667,
          225.09255832441892,
          49.999999999999986,
          186.60254037844388,
        ],
        ['C', 80.9401076758503, 168.73926088303568, 100, 135.72655899081636, 100, 100],
        ['C', 100, 23.01996410804992, 16.66666666666668, -25.092558324418903, -49.99999999999998, 13.397459621556123],
        ['C', -80.94010767585029, 31.2607391169643, -100, 64.27344100918364, -100, 100],
        ['C', -100, 100, -100, 100, -100, 100],
      ],
      true,
    );
    expect(pathArray).toEqual([
      ['M', -100, 100],
      [
        'C',
        -99.99999999999999,
        176.98003589195008,
        -16.66666666666667,
        225.09255832441892,
        49.999999999999986,
        186.60254037844388,
      ],
      ['C', 80.9401076758503, 168.73926088303568, 100, 135.72655899081636, 100, 100],
      ['C', 100, 23.01996410804992, 16.66666666666668, -25.092558324418903, -49.99999999999998, 13.397459621556123],
      ['C', -80.94010767585029, 31.2607391169643, -100, 64.27344100918364, -100, 100],
      ['C', -100, 100, -100, 100, -100, 100],
    ]);
    expect(zCommandIndexes).toEqual([]);
  });
});
